#!/bin/sh

# Help data.
HELP="\n
csync - push/pull a directory tree or file to/from the cloud.\n
\n
Syntax\n
\n
csync -c -d -h -v [push|pull] [dir-or-file]\n
\n
-c - base file diffs on checksums (this is slower becaause it calculates\n
checksums on every local file). The default is to simply compare file sizes\n
but that obviously misses file changes which don't alter the file size.\n
\n
-d - Delete files in the target tree that don't exist in the source tree.\n
\n
-h - display this help text\n
\n
-v - product verbose output detailing every file transferred\n
\n
dir-or-file - Optional aergument specifying the source for a push\n
operation and the destination for a pull operation. If unspecified,\n
this is assumed to be the current directory. If the explicitly or\n
implcitly specified path is a directory, the entire directory tree\n
is recursively synched with the cloud representation.\n
\n
Note that cscync compares the local object(s) with the cloud \n
representation(s) and transfers data only when the two analogs differ\n
in size (or in content, if the -c option is supplied).\n

For more information, see http://githunb.com/marcacohen/csync
"

# Define/initialize environment variables. 
OPTIND=1         # Reset in case getopts has been used previously in the shell.
op=""
dir_or_file=""
src=""
dest=""
verbose=0
checksums=
delete=

# Make sure we know the user's home directory.
if [ "$HOME" = "" ]
then
    echo "HOME environment variable not defined"
    echo -e $HELP
    exit 0
fi

# Make sure the user has defined a bucket for use with this command.
if [ "$CSYNC_BUCKET" = "" ]
then
    echo "CSYNC_BUCKET environment variable not defined"
    echo -e $HELP
    exit 0
fi

# Parse options.
while getopts "cdh?v" opt; do
    case "$opt" in
    h|\?)
        echo -e $HELP
        exit 0
        ;;
    v)  verbose=1
        ;;
    c)  checksums=-c
        ;;
    d)  delete=-d
        ;;
    esac
done

# Skip to op and dir-or-file args.
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Set local dir-or-file and expanded dir-or-file (absolute path to dir-or-file).
if [ "$2" != "" ]
then
    if [[ $2 = */\./*  ||  $2 = \.  || $2 = */\.\./* || $2 = \.\. ]]
    then
        echo "Dot (.) and double dot (..) not allowed in dir-or-file argument."
        exit 0
    fi
    dir_or_file=$2
    if [[ "$2" = /* ]]
    then
        expanded_dir_or_file=$2
    else
        expanded_dir_or_file=`pwd`/$2
    fi
else
    dir_or_file="."
    expanded_dir_or_file=`pwd`
fi

# If local dir or file is under homedir, make it relative. Otherwise, keep it absolute.
cloud_path=""
case $expanded_dir_or_file in
  $HOME*) cloud_path=${CSYNC_BUCKET}/HOME${expanded_dir_or_file#$HOME};
          local_path=$dir_or_file
          ;;
  *) cloud_path=${CSYNC_BUCKET}$dir_or_file
     local_path=$dir_or_file
     ;;
esac

if [ "$1" = "push" ]
then
    op="push"
    src=$local_path
    dest=$cloud_path
    shift
elif [ "$1" = "pull" ]
then
    src=$cloud_path
    dest=$local_path
    op="pull"
    shift
else
    echo "No operation (push or pull) specified."
    echo -e $HELP
    exit 0
fi

cmd="gsutil -m rsync -r $checksum $delete $src $dest"
if [ "$verbose" = "1" ]
then
    echo $cmd
fi

#$cmd
